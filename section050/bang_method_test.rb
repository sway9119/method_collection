# 破壊的メソッドについて
# レシーバを書き換えるメソッド「!」
# 同じオブジェクトを複数の変数で共有している場合に破壊的メソッドを使うと、他の変数にも影響する
# （普通は、同じオブジェクトで複数の変数を共有していても、書き換えたもののみ変更される）
# 破壊的メソッドがあるものは、必ず非破壊的メソッドも存在する。
# 「!」が付いていない破壊的メソッドもある。（clear, replace, concat, delete~~, insert, update...)


# 非破壊的メソッドの例
# 配列にaという名札を付ける
a = [1,1,2]
# bにaという名札を付ける
p b = a  # => [1, 1, 2]
# bの名札を剥がし、新しく作成された配列にbという名札を付ける
# （uniqメソッドは、配列の中で重複する要素を削除した新しい配列を返す。）
p b = b.uniq  # => [1, 2]
# aという名札は残っているので書き変わらない
p a  # => [1, 1, 2]


# 破壊的メソッドの例
a = [1,1,2]
b = a
# b(とa)の名札が付いている配列を書き換える
b.uniq!
# aとbの名札が付いているので両方書き換わる。破壊的!
p b  # => [1, 2]
p a  # => [1, 2]

# コピーに対して破壊的メソッドを適用した例
a = [1,1,2]
# aのコピーにbという名札を付ける。コピーなのでaとは別物
b = a.clone
# bの名札が付いている配列を書き換える
b.uniq!
# aのコピーが書き変わったのでaそのものは書き変わらない
p b  # => [1, 2]
p a  # => [1, 1, 2]
